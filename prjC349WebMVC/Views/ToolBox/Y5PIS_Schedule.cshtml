@{
    ViewBag.Title = "Y5PIS_Schedule";
}

<h2>產線排程</h2>

<style>
    /* 设置滚动条的宽度和高度 */
    ::-webkit-scrollbar {
        width: 50px;
        height: 20px;
    }
    /* 设置滚动条的背景颜色 */
    ::-webkit-scrollbar-track {
        background-color: #f1f1f1;
    }

    /* 设置滚动条滑块的样式 */
    ::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 10px;
    }

        /* 设置滚动条滑块在 hover 状态下的样式 */
        ::-webkit-scrollbar-thumb:hover {
            background-color: #555;
        }

    .warning {
        color: red;
    }

    .warning {
        color: red;
    }
    /* 1280*1024解析度下的媒體查詢 */
    /*@@media only screen and (max-width: 1280px) and (max-height: 1024px) {
        #tb_todolist th:not(:nth-child(1)):not(:nth-child(3)):not(:nth-child(4)):not(:nth-child(5)):not(:nth-child(10)),
        #tb_todolist td:not(:nth-child(1)):not(:nth-child(3)):not(:nth-child(4)):not(:nth-child(5)):not(:nth-child(10)) {
            display: none;*/ /* 隱藏非第1、3、4、和第10個欄位 */
    /*}
    }*/

    .custom_container {
        display: flex;
    }

    .left-div {
        width: 600px;
    }

    .float-div {
        margin-left: 40px;
        width: 600px;
        flex-grow: 1;
    }

    .left-100-div {
        display: inline-block;
        vertical-align: top;
        width: 100px;
    }

    .float-100-div {
        display: inline-block;
        vertical-align: top;
        margin-left: 10px;
        width: 100px;
        flex-grow: 1;
    }

    .custom_table {
        width: 100%;
        border-collapse: collapse;
    }

    th {
        position: sticky;
        top: 0;
        background-color: #f5f5f5;
        font-weight: bold;
    }

        th:hover {
            color: blue;
            text-decoration: underline;
            cursor: pointer; /* 可選，將滑鼠游標改為手型 */
        }

/*    tr:nth-child(even) {
        background-color: #f9f9f9;
    }*/

    tr:hover {
        background-color: #ffffcc;
    }

    th, td {
        border: 1px solid #ddd;
    }

    .special-color {
        /* 添加特殊颜色的样式 */
        color: red;
    }
    .level-is-2 {
        background-color: lightgreen;
    }
    .level-is-3 {
        background-color: yellow;
    }
</style>
<script src="~/Scripts/mermaid.min.js"></script>
<script>
    mermaid.initialize({ startOnLoad: true });
</script>

<div id="app">
    @*<div class="mermaid">
            graph LR;
            3CAL --> O;
            3CGL --> O;
            VACSS --> O;
            O --> PKL2;
            O --> PKL1;
            PKL2 --> o;
            PKL1 --> o;
            o --> 87庫;
            o --> 86庫;
        </div>*@
    <div>
        <img src="~/Images/Y57toC349_flowchart.png" style="width: 1000px" />
    </div>
    <div class="custom_container">
        <div>
            <button @@click="tb_1_toggleCollapse">
                {{ tb_1_isCollapsed ? '-' : '+' }}
            </button>
            <label>PKL_1排程</label>
            <div style="width:100px">
                <table class="custom_table">
                    <tr v-for="(count, code) in pkl_1_code_count" v-if="code !== ' -'" 
                        v-bind:class="{'level-is-2': code.includes('-2'), 'level-is-3': code.includes('-3')}">
                        <td>{{ code }}</td>
                        <td>{{ count }}</td>
                    </tr>
                </table>
            </div>
            <div v-if="tb_1_isCollapsed">
                <!-- 摺疊的内容 -->
                <div class="left-div">
                    <table class="custom_table" id="tb_todolist_1">
                        <thead>
                            <tr>
                                <th>站點</th>
                                <th>鋼捲號碼</th>
                                <th>Label</th>
                                <th>代碼</th>
                                <th>訂單號碼</th>
                                <th>工作</th>
                            </tr>
                        <tbody>
                            <tr v-for="pkl_1_data in pkl_1" :key="pkl_1_data.id"
                                v-bind:class="{'level-is-2': JSON.stringify(pkl_1_data.coil_layer).includes('2'), 'level-is-3': JSON.stringify(pkl_1_data.coil_layer).includes('3')}">
                                <td>{{ pkl_1_data.station }}</td>
                                <td>{{ pkl_1_data.coilId }}</td>
                                <td>{{ pkl_1_data.labelId }}</td>
                                <td>{{ pkl_1_data.coil_code }} - {{ pkl_1_data.coil_layer }}</td>
                                <td :class="{'special-color': pkl_1_data.orderItem && pkl_1_data.orderItem.startsWith('T')}">{{ pkl_1_data.orderItem }}</td>
                                <td>{{ pkl_1_data.description }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div>
            <button @@click="tb_2_toggleCollapse" style="margin-left:40px">
                {{ tb_2_isCollapsed ? '-' : '+' }}
            </button>
            <label>PKL_2排程</label>
            <div style="margin-left:40px;width:100px">
                <table class="custom_table">
                    <tr v-for="(count, code) in pkl_2_code_count" v-if="code !== ' -'"
                        v-bind:class="{'level-is-2': code.includes('-2'), 'level-is-3': code.includes('-3')}">
                        <td>{{ code }}</td>
                        <td>{{ count }}</td>
                    </tr>
                </table>
            </div>
            <div v-if="tb_2_isCollapsed">
                <!-- 摺疊的内容 -->
                <div class="float-div">
                    <table class="custom_table" id="tb_todolist_2">
                        <thead>
                            <tr>
                                <th>站點</th>
                                <th>鋼捲號碼</th>
                                <th>Label</th>
                                <th>代碼</th>
                                <th>訂單號碼</th>
                                <th>工作</th>
                            </tr>
                        <tbody>
                            <tr v-for="pkl_2_data in pkl_2" :key="pkl_2_data.id"
                                v-bind:class="{'level-is-2': JSON.stringify(pkl_2_data.coil_layer).includes('2'), 'level-is-3': JSON.stringify(pkl_2_data.coil_layer).includes('3')}">
                                <td>{{ pkl_2_data.station }}</td>
                                <td>{{ pkl_2_data.coilId }}</td>
                                <td>{{ pkl_2_data.labelId }}</td>
                                <td>{{ pkl_2_data.coil_code }} - {{ pkl_2_data.coil_layer }}</td>
                                <td :class="{'special-color': pkl_2_data.orderItem && pkl_2_data.orderItem.startsWith('T')}">{{ pkl_2_data.orderItem }}</td>
                                <td>{{ pkl_2_data.description }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div style="margin-top:40px">
        <button @@click="tb_3_toggleCollapse">
            {{ tb_3_isCollapsed ? '-' : '+' }}
        </button>
        <label>VACSS排程</label>
        <div>
            <div class="left-100-div">
                <label>1-10</label>
                <table>
                    <tr v-for="(count, code,index) in vacss_code_count" v-if="code !== ' -' && index < 10"
                        v-bind:class="{'level-is-2': code.includes('-2'), 'level-is-3': code.includes('-3')}">
                        <td>{{ code }}</td>
                        <td>{{ count }}</td>
                    </tr>
                </table>
            </div>
            <div class="float-100-div">
                <label>11-20</label>
                <table>
                    <tr v-for="(count, code,index) in vacss_code_count" v-if="code !== ' -' && index >= 10 && index < 20">
                        <td>{{ code }}</td>
                        <td>{{ count }}</td>
                    </tr>
                </table>
            </div>
        </div>
        <div v-if="tb_3_isCollapsed">
            <!-- 摺疊的内容 -->
            <div class="left-div">
                <table class="custom_table" id="tb_todolist_3">
                    <thead>
                        <tr>
                            <th>順序</th>
                            <th>鋼捲號碼</th>
                            <th>Label</th>
                            <th>代碼</th>
                            <th>訂單號碼</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="vacss_data in vacss" :key="vacss_data.id"
                            v-bind:class="{'level-is-2': JSON.stringify(vacss_data.coil_layer).includes('2'), 'level-is-3': JSON.stringify(vacss_data.coil_layer).includes('3')}">
                            <td>{{ vacss_data.station }}</td>
                            <td>{{ vacss_data.coilId }}</td>
                            <td>{{ vacss_data.labelId }}</td>
                            <td>{{ vacss_data.coil_code }} - {{ vacss_data.coil_layer }}</td>
                            <td :class="{'special-color': vacss_data.orderItem && vacss_data.orderItem.startsWith('T')}">{{ vacss_data.orderItem }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="custom_container" style="margin-top:40px">
        <div>
            <button @@click="tb_4_toggleCollapse">
                {{ tb_4_isCollapsed ? '-' : '+' }}
            </button>
            <label>3CAL排程</label>
            <div>
                <div class="left-100-div">
                    <label>1-10</label>
                    <table>
                        <tr v-for="(count, code,index) in cal_3_code_count" v-if="code !== ' -' && index < 10"
                            v-bind:class="{'level-is-2': code.includes('-2'), 'level-is-3': code.includes('-3')}">
                            <td>{{ code }}</td>
                            <td>{{ count }}</td>
                        </tr>
                    </table>
                </div>
                <div class="float-100-div">
                    <label>11-20</label>
                    <table>
                        <tr v-for="(count, code,index) in cal_3_code_count" v-if="code !== ' -' && index >= 10 && index < 20"
                            v-bind:class="{'level-is-2': code.includes('-2'), 'level-is-3': code.includes('-3')}">
                            <td>{{ code }}</td>
                            <td>{{ count }}</td>
                        </tr>
                    </table>
                </div>
            </div>
            <div v-if="tb_4_isCollapsed">
                <!-- 摺疊的内容 -->
                <div class="left-div">
                    <table class="custom_table" id="tb_todolist_4">
                        <thead>
                            <tr>
                                <th>順序</th>
                                <th>鋼捲號碼</th>
                                <th>分切</th>
                                <th>代碼</th>
                                <th>訂單號碼</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="cal_3_data in cal_3" :key="cal_3_data.id"
                                v-bind:class="{'level-is-2': JSON.stringify(cal_3_data.coil_layer).includes('2'), 'level-is-3': JSON.stringify(cal_3_data.coil_layer).includes('3')}">
                                <td>{{ cal_3_data.station }}</td>
                                <td>{{ cal_3_data.coilId }}</td>
                                <td>{{ cal_3_data.dividingNumber }}</td>
                                <td>{{ cal_3_data.coil_code }} - {{ cal_3_data.coil_layer }}</td>
                                <td :class="{'special-color': cal_3_data.orderItem && cal_3_data.orderItem.startsWith('T')}">{{ cal_3_data.orderItem }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div>
            <button @@click="tb_5_toggleCollapse" style="margin-left:40px">
                {{ tb_5_isCollapsed ? '-' : '+' }}
            </button>
            <label>3CGL排程</label>
            <div style="margin-left:40px" class="float-div">
                <div class="left-100-div">
                    <label>1-10</label>
                    <table>
                        <tr v-for="(count, code,index) in cgl_3_code_count" v-if="code !== ' -' && index < 10"
                            v-bind:class="{'level-is-2': code.includes('-2'), 'level-is-3': code.includes('-3')}">
                            <td>{{ code }}</td>
                            <td>{{ count }}</td>
                        </tr>
                    </table>
                </div>
                <div class="float-100-div">
                    <label>11-20</label>
                    <table>
                        <tr v-for="(count, code,index) in cgl_3_code_count" v-if="code !== ' -' && index >= 10 && index < 20"
                            v-bind:class="{'level-is-2': code.includes('-2'), 'level-is-3': code.includes('-3')}">
                            <td>{{ code }}</td>
                            <td>{{ count }}</td>
                        </tr>
                    </table>
                </div>
            </div>
            <div v-if="tb_5_isCollapsed">
                <!-- 摺疊的内容 -->
                <div class="float-div">
                    <table class="custom_table" id="tb_todolist_5">
                        <thead>
                            <tr>
                                <th>順序</th>
                                <th>鋼捲號碼</th>
                                <th>分切</th>
                                <th>代碼</th>
                                <th>訂單號碼</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="cgl_3_data in cgl_3" :key="cgl_3_data.id"
                                v-bind:class="{'level-is-2': JSON.stringify(cgl_3_data.coil_layer).includes('2'), 'level-is-3': JSON.stringify(cgl_3_data.coil_layer).includes('3')}">
                                <td>{{ cgl_3_data.station }}</td>
                                <td>{{ cgl_3_data.coilId }}</td>
                                <td>{{ cgl_3_data.dividingNumber }}</td>
                                <td>{{ cgl_3_data.coil_code }} - {{ cgl_3_data.coil_layer }}</td>
                                <td :class="{'special-color': cgl_3_data.orderItem && cgl_3_data.orderItem.startsWith('T')}">{{ cgl_3_data.orderItem }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</div>
<script>
    var origin_pkl1_data;
    var prun_pkl1_data;
    var origin_pkl2_data;
    var prun_pkl2_data;
    var global_vacss_data;
    var global_3cal_data;
    var global_3cgl_data;
    var app = new Vue({
        el: '#app',
        data() {
            return {
                tb_1_isCollapsed: false, // 預設摺疊狀態為true
                tb_2_isCollapsed: false, // 預設摺疊狀態為true
                tb_3_isCollapsed: false, // 預設摺疊狀態為true
                tb_4_isCollapsed: false, // 預設摺疊狀態為true
                tb_5_isCollapsed: false, // 預設摺疊狀態為true
                pkl_1: [],
                pkl_2: [],
                vacss: [],
                cal_3: [],
                cgl_3: [],
                pkl_1_code_count: [],
                pkl_2_code_count: [],
                vacss_code_count: [],
                cal_3_code_count: [],
                cgl_3_code_count: [],
            };
        },
        updated() {
            // 在组件重新激活时重新初始化排序功能
            bindSortTable();
        },
        methods: {
            tb_1_toggleCollapse() {
                this.tb_1_isCollapsed = !this.tb_1_isCollapsed; // 切换折叠状态
            },
            tb_2_toggleCollapse() {
                this.tb_2_isCollapsed = !this.tb_2_isCollapsed; // 切换折叠状态
            },
            tb_3_toggleCollapse() {
                this.tb_3_isCollapsed = !this.tb_3_isCollapsed; // 切换折叠状态
            },
            tb_4_toggleCollapse() {
                this.tb_4_isCollapsed = !this.tb_4_isCollapsed; // 切换折叠状态
            },
            tb_5_toggleCollapse() {
                this.tb_5_isCollapsed = !this.tb_5_isCollapsed; // 切换折叠状态
            },
            update_PKL_1_Data() {
                // 使用 AJAX 更新 pkl 資料
                // 這裡假設後端 API 的路徑為 http://y5pis.crcs.csc.com.tw/api/external/vacss-pkl1/monitor/tracking
                $.ajax({
                    url: 'http://y5pis.crcs.csc.com.tw/api/external/vacss-pkl1/monitor/tracking',
                    type: 'GET',
                    contentType: 'application/json',
                    success: (responseData) => {
                        origin_pkl1_data = responseData;

                        let pkl_1_array = new Array();
                        for (var i = 0; i < responseData.skid.length; i++) {
                            var item = responseData.skid[i];
                            var id = i;
                            var station = item.locationId;
                            var coilId = item.coilId;
                            var labelId = item.labelId;
                            var coil_code = determine_coil_code(item.weight, item.width / 10, item.innerDiameter);
                            var coil_layer = determine_layer(item.labelId, coil_code, item.thickness / 1000);
                            var orderItem = item.orderItem;
                            var description = item.description;

                            // 將這些值更新到pkl_1的對應位置
                            var tmp_pkl_1_data = {
                                station: station,
                                coilId: coilId,
                                labelId: labelId,
                                coil_code: coil_code,
                                coil_layer: coil_layer,
                                orderItem: orderItem,
                                description: description,
                            };
                            pkl_1_array.push(tmp_pkl_1_data);
                        }

                        const uniqueArray = [];
                        const uniqueIds = [];

                        pkl_1_array.forEach((obj) => {
                            if (!uniqueIds.includes(obj.labelId)) {
                                uniqueArray.push(obj);
                                uniqueIds.push(obj.labelId);
                            }
                        });

                        this.pkl_1 = uniqueArray.slice(0,24);
                        this.pkl_1_code_count = this.count_Code(this.pkl_1);
                        prun_pkl1_data = this.pkl_1;
                        console.log('PKL_1 data updated successfully');
                    },
                    error: (xhr, status, error) => {
                        console.error('Error updating pkl_1 data:', error);
                    }
                });
            },
            update_PKL_2_Data() {
                // 使用 AJAX 更新 pkl 資料
                // 這裡假設後端 API 的路徑為 http://y5pis.crcs.csc.com.tw/api/external/vacss-pkl2/monitor/tracking
                $.ajax({
                    url: 'http://y5pis.crcs.csc.com.tw/api/external/vacss-pkl2/monitor/tracking',
                    type: 'GET',
                    contentType: 'application/json',
                    success: (responseData) => {
                        global_pkl2_data = responseData;

                        let pkl_2_array = new Array();
                        for (var i = 0; i < responseData.skid.length; i++) {
                            var item = responseData.skid[i];
                            var id = i;
                            var station = item.locationId;
                            var coilId = item.coilId;
                            var labelId = item.labelId;
                            var coil_code = determine_coil_code(item.weight, item.width / 10, item.innerDiameter);
                            var coil_layer = determine_layer(item.labelId, coil_code, item.thickness / 1000);
                            var orderItem = item.orderItem;
                            var description = item.description;

                            // 將這些值更新到pkl_2的對應位置
                            var tmp_pkl_2_data = {
                                station: station,
                                coilId: coilId,
                                labelId: labelId,
                                coil_code: coil_code,
                                coil_layer: coil_layer,
                                orderItem: orderItem,
                                description: description,
                            };
                            pkl_2_array.push(tmp_pkl_2_data);
                        }

                        const uniqueArray = [];
                        const uniqueIds = [];

                        pkl_2_array.forEach((obj) => {
                            if (!uniqueIds.includes(obj.labelId)) {
                                uniqueArray.push(obj);
                                uniqueIds.push(obj.labelId);
                            }
                        });

                        this.pkl_2 = uniqueArray.slice(0,24);
                        this.pkl_2_code_count = this.count_Code(this.pkl_2);
                        prun_pkl2_data = this.pkl_2;
                        console.log('PKL_2 data updated successfully');
                    },
                    error: (xhr, status, error) => {
                        console.error('Error updating pkl_2 data:', error);
                    }
                });
            },
            update_VACSS_Data() {
                // 使用 AJAX 更新 VACSS 資料
                // 這裡假設後端 API 的路徑為 http://y5pis.crcs.csc.com.tw/api/external/vacss-pkl/monitor/schedule
                $.ajax({
                    url: 'http://y5pis.crcs.csc.com.tw/api/external/vacss-pkl/monitor/schedule',
                    type: 'GET',
                    contentType: 'application/json',
                    success: (responseData) => {
                        global_vacss_data = responseData;

                        let vacss_array = new Array();
                        for (var i = 0; i < responseData.list.length; i++) {
                            var item = responseData.list[i];
                            var station = item.locationId;
                            var coilId = item.coilId;
                            var labelId = item.labelId;
                            var coil_code = item.productStorageType;
                            var coil_layer = item.productStorageLayer;
                            var orderItem = item.orderItem;

                            // 將這些值更新到vacss的對應位置
                            var tmp_vacss_data = {
                                station: station,
                                coilId: coilId,
                                labelId: labelId,
                                coil_code: coil_code,
                                coil_layer: coil_layer,
                                orderItem: orderItem,
                            };
                            vacss_array.push(tmp_vacss_data);
                        }
                        this.vacss = vacss_array;
                        this.vacss_code_count = this.count_Code(this.vacss.slice(0, 100));
                        console.log('VACSS data updated successfully');
                    },
                    error: (xhr, status, error) => {
                        console.error('Error updating VACSS data:', error);
                    }
                });
            },
            update_3CAL_Data() {
                // 使用 AJAX 更新 3CAL 資料
                // 這裡假設後端 API 的路徑為 http://y5pis.y6p4.csc.com.tw/api/external/3cal/monitor/schedule
                $.ajax({
                    url: 'http://y5pis.y6p4.csc.com.tw/api/external/3cal/monitor/schedule',
                    type: 'GET',
                    contentType: 'application/json',
                    success: (responseData) => {
                        global_3cal_data = responseData;

                        let cal_3_array = new Array();
                        for (var i = 0; i < responseData.list.length; i++) {
                            var item = responseData.list[i];
                            var station = item.order;
                            var coilId = item.coilId;

                            var dividingNumber = item.dividingNumber;
                            if (dividingNumber == null) dividingNumber = 1;
                            
                            var weight = item.weight / dividingNumber;

                            var coil_code = determine_coil_code(weight, item.targetWidth, item.targetInnerDiameter);
                            var coil_layer = determine_layer("H", coil_code, item.targetThickness / 1000);
                            var orderItem = item.orderItem;

                            // 將這些值更新到vacss的對應位置
                            var tmp_cal_3_data = {
                                station: station,
                                coilId: coilId,
                                dividingNumber: dividingNumber,
                                coil_code: coil_code,
                                coil_layer: coil_layer,
                                orderItem: orderItem,
                            };
                            cal_3_array.push(tmp_cal_3_data);
                        }
                        this.cal_3 = cal_3_array;
                        this.cal_3_code_count = this.count_Code(this.cal_3.slice(0,100));
                        console.log('3CAL data updated successfully');
                    },
                    error: (xhr, status, error) => {
                        console.error('Error updating 3CAL data:', error);
                    }
                });
            },
            update_3CGL_Data() {
                // 使用 AJAX 更新 3CAL 資料
                // 這裡假設後端 API 的路徑為 http://y5pis.y6p4.csc.com.tw/api/external/3cgl/monitor/schedule
                $.ajax({
                    url: 'http://y5pis.y6p4.csc.com.tw/api/external/3cgl/monitor/schedule',
                    type: 'GET',
                    contentType: 'application/json',
                    success: (responseData) => {
                        global_3cgl_data = responseData;

                        let cgl_3_array = new Array();
                        for (var i = 0; i < responseData.list.length; i++) {
                            var item = responseData.list[i];
                            var station = item.order;
                            var coilId = item.coilId;

                            var dividingNumber = item.dividingNumber;
                            if (dividingNumber == null) dividingNumber = 1;

                            var weight = item.weight / dividingNumber;
                            var coil_code = determine_coil_code(weight, item.width, item.innerDiameter);
                            var coil_layer = determine_layer("H", coil_code, item.thickness / 1000);
                            var orderItem = item.orderItem;

                            // 將這些值更新到vacss的對應位置
                            var tmp_cgl_3_data = {
                                station: station,
                                coilId: coilId,
                                dividingNumber: dividingNumber,
                                coil_code: coil_code,
                                coil_layer: coil_layer,
                                orderItem: orderItem,
                            };
                            cgl_3_array.push(tmp_cgl_3_data);
                        }
                        this.cgl_3 = cgl_3_array;
                        this.cgl_3_code_count = this.count_Code(this.cgl_3.slice(0,100));
                        console.log('3CGL data updated successfully');
                    },
                    error: (xhr, status, error) => {
                        console.error('Error updating 3CGL data:', error);
                    }
                });
            },
            count_Code(data) {
                const codeCount = {}; // 使用物件來紀錄每個代碼的數量

                // 遍歷資料陣列，統計代碼數量
                data.forEach(item => {
                    const code = item.coil_code + "-" + item.coil_layer;

                    if (codeCount.hasOwnProperty(code)) {
                        codeCount[code]++; // 代碼已存在，數量加一
                    } else {
                        codeCount[code] = 1; // 新代碼，數量設為一
                    }
                });

                // 輸出代碼數量統計結果
                //for (const code in codeCount) {
                //    console.log(`${code}: ${codeCount[code]}`);
                //}

                return codeCount;
            }
        },
        created() {
            this.update_PKL_1_Data();
            this.update_PKL_2_Data();
            this.update_VACSS_Data();
            this.update_3CAL_Data();
            this.update_3CGL_Data();
            // 在 Vue 实例被创建后，每隔一段时间调用 update_PKL_1_Data,update_PKL_2_Data 函数
            setInterval(() => {
                this.update_PKL_1_Data();
                this.update_PKL_2_Data();
                this.update_VACSS_Data();
                this.update_3CAL_Data();
                this.update_3CGL_Data();
            }, 60000); // 每 60 秒执行一次，可以根据需求调整时间间隔
        }

    });
</script>
<script>
    // 排序表格
    var globalV;
    function sortTable(columnIndex, tableId) {
        const table = document.getElementById(tableId);
        const rows = table.rows;
        const isAscending = table.getAttribute("data-sort-order") === "asc";
        const compare = (a, b) => {
            const valueA = a.cells[columnIndex].innerText;
            const valueB = b.cells[columnIndex].innerText;
            const sortOrder = isAscending ? 1 : -1;
            return sortOrder * valueA.localeCompare(valueB);
        };

        // 將tbody中的tr轉為array以便排序
        const arr = Array.from(rows).slice(1);
        arr.sort(compare);

        // 重新設置tbody中的排序後的tr
        for (let i = 0; i < arr.length; i++) {
            table.tBodies[0].appendChild(arr[i]);
        }

        // 切換排序方式
        const newSortOrder = isAscending ? "desc" : "asc";
        table.setAttribute("data-sort-order", newSortOrder);
    }

    // 綁定事件
    function bindSortTable() {
        var tableIds = ["tb_todolist_1", "tb_todolist_2", "tb_todolist_3", "tb_todolist_4", "tb_todolist_5"];

        tableIds.forEach(function (tableId) {
            document.querySelectorAll("#" + tableId + " th").forEach(function (th, i) {
                th.addEventListener("click", function () {
                    sortTable(i, tableId);
                });
            });
        });
    }
    // 在適當的地方呼叫 bindSortTable()，例如在頁面載入完成後
    document.addEventListener("DOMContentLoaded", function () {
        bindSortTable();
    });
</script>
<script>
    function determine_coil_code(weight, width, innerdiameter) {
        let weight_error_msg = "重量異常!";
        let width_error_msg = " ";

        let Weight = weight / 1000;
        let myWidth = width;

        if (innerdiameter === 610) {
            Weight = Weight + 1;
        }

        let coil_code;

        switch (true) {
            case Weight > 0 && Weight <= 2.999:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A02";
                        break;
                    case myWidth >= 1100 && myWidth <= 1300:
                        coil_code = "C02";
                        break;
                    case myWidth > 1300:
                        coil_code = "D02";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 3 && Weight <= 3.999:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A03";
                        break;
                    case myWidth >= 1100 && myWidth <= 1300:
                        coil_code = "C03";
                        break;
                    case myWidth > 1300:
                        coil_code = "D02";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 4 && Weight <= 4.999:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A04";
                        break;
                    case myWidth >= 1100 && myWidth <= 1300:
                        coil_code = "C04";
                        break;
                    case myWidth > 1300:
                        coil_code = "D04";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 5 && Weight <= 5.999:
                switch (true) {
                    case myWidth < 1000:
                        coil_code = "A05";
                        break;
                    case myWidth >= 1000 && myWidth <= 1300:
                        coil_code = "C05";
                        break;
                    case myWidth > 1300:
                        coil_code = "D05";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 6 && Weight <= 6.999:
                switch (true) {
                    case myWidth < 1000:
                        coil_code = "A06";
                        break;
                    case myWidth >= 1000 && myWidth <= 1300:
                        coil_code = "C06";
                        break;
                    case myWidth > 1300:
                        coil_code = "D06";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 6 && Weight <= 6.999:
                switch (true) {
                    case myWidth < 900:
                        coil_code = "K06";
                        break;
                    case myWidth >= 900 && myWidth <= 999.9:
                        coil_code = "A06";
                        break;
                    case myWidth >= 1000 && myWidth <= 1099.9:
                        coil_code = "B06";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C06";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D06";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E06";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 7 && Weight <= 7.499:
                switch (true) {
                    case myWidth <= 900:
                        coil_code = "K06";
                        break;
                    case myWidth >= 900 && myWidth <= 999.9:
                        coil_code = "A07";
                        break;
                    case myWidth >= 1000 && myWidth <= 1149.9:
                        coil_code = "B07";
                        break;
                    case myWidth >= 1150 && myWidth <= 1299.9:
                        coil_code = "C07";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D06";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E06";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 7.5 && Weight <= 7.999:
                switch (true) {
                    case myWidth < 900:
                        coil_code = "K07";
                        break;
                    case myWidth >= 900 && myWidth <= 999.9:
                        coil_code = "A07";
                        break;
                    case myWidth >= 1000 && myWidth <= 1149.9:
                        coil_code = "B07";
                        break;
                    case myWidth >= 1150 && myWidth <= 1299.9:
                        coil_code = "C07";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D06";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E06";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 8 && Weight <= 8.999:
                switch (true) {
                    case myWidth < 900:
                        coil_code = "K07";
                        break;
                    case myWidth >= 900 && myWidth <= 999.9:
                        coil_code = "A08";
                        break;
                    case myWidth >= 1000 && myWidth <= 1099.9:
                        coil_code = "B08";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C08";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D08";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E08";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 9 && Weight <= 9.999:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A09";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C09";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D08";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E08";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 10 && Weight <= 11.495:
                switch (true) {
                    case myWidth < 1000:
                        coil_code = "A10";
                        break;
                    case myWidth >= 1000 && myWidth <= 1149.9:
                        coil_code = "B10";
                        break;
                    case myWidth >= 1150 && myWidth <= 1299.9:
                        coil_code = "C10";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D10";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E10";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 11.5 && Weight <= 12.999:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A12";
                        break;
                    case myWidth >= 1000 && myWidth <= 1299.9:
                        coil_code = "C12";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D10";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E10";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 13 && Weight <= 14.999:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A13";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C13";
                        break;
                    case myWidth >= 1300:
                        coil_code = "D13";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 15 && Weight <= 17.495:
                switch (true) {
                    case myWidth < 900:
                        coil_code = "K15";
                        break;
                    case myWidth >= 900 && myWidth <= 999.9:
                        coil_code = "A15";
                        break;
                    case myWidth >= 1000 && myWidth <= 1099.9:
                        coil_code = "B15";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C15";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D15";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E15";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 17.5 && Weight <= 18.999:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A17";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C15";
                        break;
                    case myWidth >= 1300 && myWidth <= 1449.9:
                        coil_code = "D15";
                        break;
                    case myWidth >= 1450:
                        coil_code = "E15";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 19 && Weight <= 22.495:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "A17";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C19";
                        break;
                    case myWidth >= 1300:
                        coil_code = "D19";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 22.5 && Weight <= 25.999:
                switch (true) {
                    case myWidth <= 1100:
                        coil_code = "A22";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C22";
                        break;
                    case myWidth >= 1300:
                        coil_code = "D22";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            case Weight >= 26:
                switch (true) {
                    case myWidth < 1100:
                        coil_code = "未定義";
                        break;
                    case myWidth >= 1100 && myWidth <= 1299.9:
                        coil_code = "C26";
                        break;
                    case myWidth >= 1300:
                        coil_code = "D26";
                        break;
                    default:
                        coil_code = width_error_msg;
                        break;
                }
                break;
            default:
                coil_code = width_error_msg;
                break;
        }
        return coil_code;
    }
    function determine_layer(label, code, Thick) {
        if (label === null) { return ""; }
        if (label[0] === "J") { return 2; }
        else {
            switch (code) {
                case "A02":
                case "A03":
                case "C02":
                case "C03":
                case "D02":
                    var coil_layer = 3;
                    break;
                case "A10":
                case "A12":
                case "A13":
                case "A15":
                case "A17":
                case "A22":
                case "B10":
                case "C13":
                case "C15":
                case "C19":
                case "C22":
                case "C26":
                case "D13":
                case "D15":
                case "D19":
                case "D22":
                case "D26":
                case "E15":
                    var coil_layer = 2;
                    break;
                default:
                    if (Thick > 0.4) {
                        var coil_layer = 3;
                    } else {
                        var coil_layer = 2;
                    }
            }
        }
        return coil_layer;
    }
</script>

